generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            Int          @id @default(autoincrement())
  username      String       @unique
  email         String       @unique
  password      String
  role          String       @default("usuario")
  ativo         Boolean      @default(true)
  funcionarioId Int?         @unique
  funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("usuarios")
}

model Funcionario {
  id             Int              @id @default(autoincrement())
  nome           String
  cpf            String           @unique
  cargo          String
  email          String           @unique
  telefone       String?
  jornadaInicio  String
  jornadaFim     String
  quickbooksId   String?          @unique
  syncedAt       DateTime?
  syncStatus     String?          @default("pending")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  usuario        Usuario?
  pontos         Ponto[]
  ordensServico  OrdemServico[]

  @@map("funcionarios")
}

model Cliente {
  id             Int              @id @default(autoincrement())
  nome           String
  email          String
  telefone       String
  endereco       String
  documento      String           @unique
  tipoDocumento  String
  quickbooksId   String?          @unique
  syncedAt       DateTime?
  syncStatus     String?          @default("pending")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  pedidos        Pedido[]
  ordensServico  OrdemServico[]

  @@map("clientes")
}

model Categoria {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  descricao String?
  produtos  Produto[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categorias")
}

model Produto {
  id             Int          @id @default(autoincrement())
  nome           String
  codigo         String       @unique
  descricao      String?
  preco          Float
  estoqueAtual   Int          @default(0)
  estoqueMinimo  Int          @default(0)
  categoriaId    Int
  categoria      Categoria    @relation(fields: [categoriaId], references: [id])
  quickbooksId   String?      @unique
  syncedAt       DateTime?
  syncStatus     String?      @default("pending")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  pedidoItens    PedidoItem[]

  @@map("produtos")
}

model Motorista {
  id                 Int       @id @default(autoincrement())
  primeiroNome       String
  nomeCompleto       String
  celular            String
  operadora          String?
  cpf                String    @unique
  email              String    @unique
  dataNascimento     DateTime
  rg                 String    @unique
  orgaoEmissor       String
  ufEmissor          String
  municipioNasc      String
  dataEmissaoRg      DateTime
  telefone           String?
  nomeMae            String
  nomePai            String
  pis                String?
  pais               String    @default("BRASIL")
  sexo               String
  cep                String
  endereco           String
  bairro             String
  cidade             String
  numero             String
  complemento        String?
  resideDesdeMes     Int
  resideDesdeAno     Int
  numeroHabilitacao  String    @unique
  cidadeCnh          String
  categoriaCnh       String
  dataEmissaoCnh     DateTime
  validadeCnh        DateTime
  dataPrimeiraCnh    DateTime
  codSegurancaCnh    String
  anexoCnh           String?
  ativo              Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  entregas           Entrega[]

  @@map("motoristas")
}

model Veiculo {
  id                       Int       @id @default(autoincrement())
  placa                    String    @unique
  renavam                  String    @unique
  marca                    String
  modelo                   String
  anoFabricacao            Int
  anoModelo                Int
  cor                      String
  dataCompra               DateTime
  baseOperacao             String
  tipoVeiculo              String
  categoriaFrota           String
  seguradora               String?
  vigencia                 DateTime?
  taraVeiculo              Float?
  capacidadeCarga          Float?
  capacidadeCargaM3        Float?
  tipoCarroceria           String?
  ufEmplacada              String
  tipoRodado               String?
  certificadoCronotacografo String?
  medidasRodado            String?
  consumoKmLitro           Float?
  kmMaximoRota             Float?
  capacidadeTanque         Float?
  tipoResponsavel          String?
  unidadeProprietaria      String?
  financiamento            String?
  instituicaoFinanceira    String?
  tabela                   String?
  valorEntrega             Float?
  valorKmRodado            Float?
  valorDiaria              Float?
  ativo                    Boolean   @default(true)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  entregas                 Entrega[]

  @@map("veiculos")
}

model Pedido {
  id             Int          @id @default(autoincrement())
  numero         String       @unique
  clienteId      Int
  cliente        Cliente      @relation(fields: [clienteId], references: [id])
  data           DateTime
  horario        String
  endereco       String
  observacao     String?
  status         String       @default("agendado")
  quickbooksId   String?      @unique
  estimateId     Int?         @unique
  syncedAt       DateTime?
  syncStatus     String?      @default("pending")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  itens          PedidoItem[]
  entrega        Entrega?

  @@map("pedidos")
}

model PedidoItem {
  id             String   @id @default(cuid())
  pedidoId       Int
  pedido         Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  produtoId      Int
  produto        Produto  @relation(fields: [produtoId], references: [id])
  quantidade     Int
  precoUnitario  Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("pedido_itens")
}

model Entrega {
  id                   Int        @id @default(autoincrement())
  pedidoId             Int        @unique
  pedido               Pedido     @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  estimateId           Int?
  quickbooksInvoiceId  String?
  dataEntrega          DateTime
  horarioEntrega       String
  motoristaId          Int
  motorista            Motorista  @relation(fields: [motoristaId], references: [id])
  veiculoId            Int
  veiculo              Veiculo    @relation(fields: [veiculoId], references: [id])
  status               String     @default("agendada")
  observacoes          String?
  nomeRecebedor        String?
  identidadeRecebedor  String?
  dataRecebimento      DateTime?
  fotoComprovante      String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@map("entregas")
}

model Ponto {
  id             Int         @id @default(autoincrement())
  funcionarioId  Int
  funcionario    Funcionario @relation(fields: [funcionarioId], references: [id])
  tipo           String
  timestamp      DateTime    @default(now())
  createdAt      DateTime    @default(now())

  @@map("pontos")
}

model OrdemServico {
  id             Int         @id @default(autoincrement())
  clienteId      Int
  cliente        Cliente     @relation(fields: [clienteId], references: [id])
  funcionarioId  Int
  funcionario    Funcionario @relation(fields: [funcionarioId], references: [id])
  descricao      String
  status         String      @default("pendente")
  dataInicio     DateTime
  dataFim        DateTime?
  observacoes    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("ordens_servico")
}

model QuickBooksConfig {
  id                     Int      @id @default(autoincrement())
  realmId                String   @unique
  accessToken            String   @db.Text
  refreshToken           String   @db.Text
  expiresIn              Int      @default(3600)
  expiresAt              DateTime
  refreshTokenExpiresAt  DateTime
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("quickbooks_config")
}

model SyncLog {
  id             Int      @id @default(autoincrement())
  entityType     String
  entityId       Int
  action         String
  status         String
  quickbooksId   String?
  errorMessage   String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("sync_logs")
}
